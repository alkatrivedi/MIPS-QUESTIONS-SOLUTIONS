Q1. SumMain($a0: &X, $a1: N, $v0: Sum)
Write a function to find the sum of the main diagonal elements in a two dimensional N by N
array of 32-bit words. The address of the array and the size N are passed to the procedure in
registers $a0 and $a1 respectively. The result is returned in $v0. The values in registers $a0
and $a1 should not be modified by this procedure. Calculate the number of clock cycles
required to execute your algorithm, assuming N=4..


SOLUTION-

.data
array: .word 1 2 3 4			# initialization of the array
       .word 4 3 2 1
       .word 1 2 3 4
       .word 4 3 2 1
size: .word 4				# N = 4
str: .asciiz "the diagonal sum of the elements of the array is: "

.text
     main:
	la $a0,array
	lw $a1,size
	jal diagonalsum    		#call to the function diagonalsum
	move $t0,$v0      		 #move the return value $v0 to $t0 where $v0 is having the sum return by the diagonalsum
	li $v0,4
	la $a0,str			#load the address of the string str to the register $a0
	syscall				#print the str string
	move $a0,$t0			#move the value of the $t0 to the $a0
	li $v0,1           		#print the value of the sum of elements of the diagonal
	syscall
	li $v0,10        		 #terminate the program execution
	syscall

	diagonalsum:     		#function diagnalsum
	li $v0,0			#initialization of $v0 to 0 it is same as initializing sum of diagonal elements as 0
	li $t0,0			#initialization of $t0 to 0 it is same as initializing i=0
	sum:				#another function sum
	mul $t1,$t0,$a1			# $t1 = rowlines * colsize
	add $t1,$t1,$t0			# $t1 = $t1 + colindex
	mul $t1,$t1,4			# $t1 = $t1 * size of data ( here it is integer so take 4 )
	add $t1,$t1,$a0			# $t1 = $t1 + baseaddress of the array
	lw $t2,($t1)			# $t2 will be having the value stored in $t1
	add $v0,$v0,$t2			# sum of diagonal elements = sum of diagonal elements + $t2
	addi $t0,$t0,1			# i = i + 1
	blt $t0,$a1,sum			# if i < size then loop again
	jr $ra				# return back the value of the $v0
